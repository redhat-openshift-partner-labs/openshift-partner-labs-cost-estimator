name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.1.0)'
        required: true
        type: string
      release_title:
        description: 'Release title'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional - will use CHANGELOG.md if empty)'
        required: false
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Version must be in format vX.Y.Z (e.g., v1.1.0)"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag --list | grep -q "^${VERSION}$"; then
            echo "❌ Error: Tag ${VERSION} already exists"
            exit 1
          fi
          
          echo "✅ Version ${VERSION} is valid"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd aws
          python -m unittest discover -s . -p "test_*.py" -v

  create-release:
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          TITLE="${{ github.event.inputs.release_title }}"
          
          # Create annotated tag
          git tag -a "$VERSION" -m "$VERSION - $TITLE"
          git push origin "$VERSION"
          
          echo "✅ Created and pushed tag: $VERSION"

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          
          if [ -n "$CUSTOM_NOTES" ]; then
            echo "Using custom release notes"
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$CUSTOM_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Extracting notes from CHANGELOG.md"
            # Extract section for this version from CHANGELOG.md
            if grep -q "## \[$VERSION\]" CHANGELOG.md; then
              # Extract from version header to next version or end
              sed -n "/## \[$VERSION\]/,/## \[v/p" CHANGELOG.md | sed '$d' > release_notes.txt
              echo "notes<<EOF" >> $GITHUB_OUTPUT
              cat release_notes.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "notes=${{ github.event.inputs.release_title }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: ${{ github.event.inputs.release_title }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Release Summary
        run: |
          echo "🎉 Release created successfully!"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Title: ${{ github.event.inputs.release_title }}"
          echo "🔗 View at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"